<speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="zh-CN">
    <voice name="zh-CN-YunyiMultilingualNeural">
        <p>
            大家好，欢迎来到由 IDEA 研究院基础软件中心为大家带来的现代编程思想公开课。今天是第一节课，将为大家介绍课程概览，并介绍程序设计的基本流程。
        </p>
        <p> 这门课程是参考了宾夕法尼亚大学<say-as interpret-as="characters">CIS1200</say-as>课程设计的，在此表达敬意。</p>
        <p>
            首先我们要回答的问题是，什么是现代编程思想课。
        </p>
        <p>
            这门公开课是一门程序设计课。我们的课程不设门槛，面向所有的编程爱好者，无论是否有编程经验。我们将尽全力将内容讲解得清晰易懂。
            这门课程将传授大家实用的技巧，包括编写较大型程序，也就是大约一万行代码级别的能力；独立分析解决问题的能力，以及通过测试驱动开发与设计的能力。
            为了支撑这些能力，我们也希望能给大家打下坚实知识基础，这包括常见的数据结构，包括数据的存储、组织方式，与算法，包括对问题解法的描述，以及多种编程范式，包括函数式、命令式、面向对象等。
            我们将关注如何写出模块化的、可组合的程序。在我们看来，现代编程就是数据结构+算法+模块化编程。
        </p>
        <p>
            关于课程工具。这门公开课将使用月兔MoonBit这门编程语言。这门编程语言由基础软件中心开发，是一门现代的编程语言，博采众长，吸收了诸多编程语言开发使用的经验和教训，并对各种特性进行权衡考量。
            其次，这是一门静态类型的语言，意味着编译器将在编译时进行大量检查，最大可能减少运行时的错误，可以引导新手写出正确的程序。
            最后，这是一门多范式的语言，同时支持函数式、命令式、面向对象等编程范式，适合教学。 同时，月兔 MoonBit
            语法轻量，简洁易懂，十分容易上手。基础软件中心在语言本身之外还开发了众多开发者工具，支持纯浏览器开发环境、云原生开发环境以及本地集成开发环境。无需额外安装软件，即可尝试体验。
            依赖云原生开发环境，也可以在浏览器中进行大型项目的开发。开发环境的准备将在第二节课程中进行详细介绍。
        </p>
        <p>
            关于课程内容。第一、二节课，我们会简单介绍一下MoonBit编程语言的工具链，如何使用，以及如何编写第一个程序。接下来，我们将会详细介绍语言的基本语法和特性，并通过实例演示如何使用这些特性来解决实际问题。
            我们首先会从表达式的概念开始，介绍如何使用表达式来进行计算和数据处理。之后，我们将会介绍函数以及递归等概念。之后我们会介绍数据类型的定义，包括多元组、结构题、枚举类型和错误处理等。我们将会介绍如何创建、修改以及读取类型中的数据。
            接下来，我们会介绍泛型和高阶函数等概念。我们将会介绍如何使用泛型和高阶函数来编写更通用的代码。然后，我们会进入到命令式编程的介绍中。之后，我们会继续介绍接口，或者有时叫特征，以及闭包等概念。
            我们会在课程中间穿插各种案例，帮助大家更好地理解这些概念，也让大家了解一些常见的数据结构的定义，如树、队列、<phoneme alphabet="sapi" ph="ha 1">
            哈</phoneme>希表等。
            在课程的最后部分，我们则会介绍一系列的案例，包括简单的语法解析器、自动微分、基于梯度下降的神经网络等。我们将会通过这些案例来展示如何使用MoonBit编程语言来解决实际问题。
            最后，我们还会介绍如何使用月兔 MoonBit 来编写一个简单的 TODO MVC 应用程序。这个应用程序将会展示如何使用月兔 MoonBit
            来编写一个完整的应用程序，并且会涉及到更复杂的代码组织结构等。</p>
        <p>
            关于课程的资料，我们会放在网上，大家可以看视频介绍或者评论区内容。由于编程语言的特性的更新以及生态的变化，我们会不定期更新课程内容，确保大家能够学习到最新的知识和技能。
        </p>
        <p>
            那么介绍完了课程的概况，我们先来看一个简单的程序设计案例。程序设计是将非正式的规范转化为可运行代码的过程，这个规范通常是用具有二义性的自然语言来描述的。
            将规范转化为代码不仅仅意味着开发出我们所期望的可以运行的程序，也意味着转化对于软件的规范要求。我们在这里介绍的流程基于测试驱动开发的理念。
            测试驱动开发，也就是将对于软件的要求转化为实际的测试代码，并在软件开发周期中反复对软件进行测试以保证符合软件的要求。
        </p>
        <p>
            基本的设计流程大致可以分为四步。第一步，理解问题。我们需要理解问题设计的背景、需求以及限制条件。我们需要与相关人员进行沟通，确保我们理解了问题的本质，避免出现误解。
            第二步，定义接口。我们需要定义程序的输入和输出，以及程序的功能和行为。我们需要确保接口的设计符合需求，并且易于使用。
            第三步，编写测试。我们需要编写测试代码来验证程序的功能和行为。测试代码应该覆盖所有可能的输入和输出，并且能够验证程序的正确性。
            就像那个广为人知的段子，一个测试工程师在酒吧里点了一杯酒。另一个测试工程师在酒吧里点了半杯啤酒。还有一个测试工程师走进酒吧，什么也没要。一切都很好。然后另一个顾客点了一碗炒饭，酒吧炸了。
            第四步，编写代码。我们需要编写程序代码来实现我们的设计。但有的时候，问题可能依然十分复杂，这种时候我们就需要将问题进行分解，拆分成规模更小、更加简单的子问题。在这个过程中，我们同样要对各个子问题重复上述流程。
        </p>
        <p>
            让我们来看一个例子。这个例子是力扣的第1518题。题目的内容是，一个超市正在促销，你可以用数个空水瓶从超市兑换一瓶水，数量用numExchange表示。最开始，你拥有一定数量的满的水瓶，数量用numBottles表示。
            那么给定最初的水瓶数量numBottles以及兑换一瓶水需要的空水瓶数量numExchange，求最多可以喝到多少瓶水。从这个例子，让我们根据刚才的流程进行分析。
        </p>
        <p>
            第一步，理解问题。在问题中，我们涉及到了满水瓶、空水瓶和总水瓶数。我们最初拥有numBottles个满水瓶，空水瓶数和总水瓶数为0。喝掉所有满水瓶后，我们得到等量的空瓶，总水瓶数增加。
            每numExchange个空瓶可以兑换一瓶满水瓶。然后我们需要重复此过程直到空瓶不足以兑换。我们需要做的是，给定numBottles和numExchange，计算最多可以喝多少瓶水。
        </p>
        <p>
            第二步，定义接口。我们需要定义程序的输入和输出，以及程序的功能和行为。输入是numBottles和numExchange，其类型都是整数。输出是最多可以喝多少瓶水，其类型也是整数。
            在MoonBit中，我们可以定义一个函数，接受两个整数参数numBottles和numExchange，并返回一个整数。函数体的内容是三个点，表示我们还没有实现这个函数。
            在实现它之前，我们还是先定义测试代码。
        </p>
        <p>
            第三步，定义测试。在MoonBit中，我们利用test代码块来定义测试。我们使用assert
            equal来验证函数的输出是否符合预期。我们可以定义几个测试用例，比如当numBottles为9，numExchange为3时，最多可以喝到13瓶水；当numBottles为15，numExchange为4时，最多可以喝到19瓶水。
            以第一组数据为例，我们可以计算出，最初有9个满水瓶，喝掉后得到9个空水瓶。然后用3个空水瓶兑换1个满水瓶，得到3个满水瓶。喝掉后又得到3个空水瓶。再用3个空水瓶兑换1个满水瓶，得到1个满水瓶。喝掉后又得到1个空水瓶。最后，我们没有足够的空水瓶来兑换新的满水瓶了，所以最多可以喝到13瓶水。
        </p>
        <p>
            最后，我们进入第四步，编写代码。我们需要实现numWaterBottles函数。我们在这里给出一种实现，它直接模拟了我们对问题的分析。
            具体的语法我们会在后续的课程中进行介绍。简单来说，我们使用了一个for循环来模拟喝水的过程。我们定义了三个变量，numFull表示满水瓶数，numEmpty表示空水瓶数，numTotal表示总水瓶数。
            在循环中，我们首先判断numFull是否大于0，如果是，则继续喝水，更新numEmpty和numTotal。如果numEmpty大于等于numExchange，则可以兑换新的满水瓶，更新numFull、numEmpty和numTotal。如果都不满足，则结束循环并返回numTotal。
            大家可以在开发环境中对完整的代码进行测试运行。
        </p>
        <!-- 
        在这里引入代码展示部分，展示完整的代码实现
        -->
        <p>
            现在大家看到的是我们的开发环境，左侧可以看到这是一个模板项目。我们会在下一节课进行简单介绍。
            我们将代码填写到测试文件中，然后可以看到在test上方出现了test按钮。我们只要点击这个按钮，就可以运行测试用例，验证我们的代码是否正确。
        </p>
        <p>
            我们也可以在这里，将这个大于等于号改成大于号。我们再次点击按钮，会发现，下方出现了错误提示，表示我们的代码没有通过测试。
            这是我们的预期行为。我们还可以在这里看到出现错误的具体位置和错误内容。点击即可跳转。
        </p>
        <!--
        回到 PPT
        -->
        <p>
            最后留一个小练习。在案例代码中，只实现了对于理想的输入的计算。对于非正常输入会出现错误。你能找到这样的非正常输入吗？
            一个提示是，在MoonBit中，Int 类型是有范围的，并且包含了负数。大家可以尝试输入不同的值来查看它的行为。
            而在这个过程中，也可以将一些典型的检查留在代码中，以此确保，当前的正确行为之后如果发生变化可以被及时发现。
        </p>
        <p>
            那么总结一下程序设计部分的内容。我们介绍了程序设计的基本流程，包括理解问题、定义接口、编写测试和编写代码。我们通过一个简单的例子来演示这个流程，并给出了一个实现。
            现代的软件规模十分庞大。测试驱动开发可以通过定义测试来更好地指导我们的开发。在开发流程中应当尽早定义测试案例，之后运行测试即可尽早发现和纠正软件中可能存在的错误。
            现代软件的寿命不短，会不断地有新的需求出现。测试驱动开发可以帮助我们更好地应对这些变化。通过定义测试，我们可以更好地理解需求，并且在修改代码时能够更好地保证代码的正确性。
            当然，很多程序员会觉得测试驱动开发的流程过于繁琐。为此MoonBit语言在设计时就考虑到了这一点。我们会在后续的课程中介绍如何使用月兔MoonBit来更好地支持测试驱动开发。
        </p>
        <p>
            那么以上便是今天课程的全部内容。感谢大家的收看，我们下次再见。
        </p>
    </voice>
</speak>