<speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="zh-CN">
    <voice name="zh-CN-XiaoxiaoNeural">
        <p>
            大家好，欢迎来到由 IDEA 研究院基础软件中心为大家带来的现代编程思想公开课。
            今天是第二节课，主题是月兔开发与月兔中的表达式。
            我们将会讲解如何准备月兔的开发环境，然后通过建立计算模型来逐步理解用月兔编写的程序。
        </p>
        <p>
            首先，让我们回顾一下上周提到过的内容。
            我们这门课程使用的编程语言月兔是一门现代的、静态类型的多范式编程语言，支持函数式编程、命令式编程等多种编程范式。
            它的语法较为容易上手。大家可以在月兔编程语言的官网看到更多的信息。
        </p>
        <p>
            月兔的开发工具主要由两部分构成：VSCode插件与命令行工具。
            其中，VSCode插件依托VSCode这一被广泛使用的编辑器提供代码的开发环境，提供了诸如语法高亮、变量引用与定义的跳转、开发时的自动补全、程序的运行与调试等功能。
            命令行工具提供项目级别构建、测试、依赖管理等功能。一个项目通常由多个包组成，一个包又可以包含多个月兔代码文件。
            在一个包内，不同的文件之间可以相互引用对方的定义，方便将功能分门别类定义在不同文件中。
            一个项目也可能引用其他项目，来借用他人实现的功能。
            关于项目和包的组织结构与定义，我们将会在之后的课程中详细介绍。在课程中，我们将会限制于包级别的开发。
            月兔还提供一个语言导览网站，这是一个互动式的语言教程，涵盖了月兔语言的所有方面。
            VSCode插件可以在浏览器的VSCode中使用，因此我们支持的开发环境有三类，分别是基于VSCode Web的浏览器环境、云原生开发环境和本地开发环境。
        </p>
        <p>
            访问try.moonbitlang.cn即可使用浏览器环境。
            浏览器环境提供了诸多代码样例，方便大家熟悉月兔语法。
            在浏览器环境中，大家可以创建新文件并运行，也可以参考包的案例。
            浏览器环境还提供单个文件的分享功能，方便大家分享代码以及提交反馈。
            需要注意的是，当前的浏览器环境不会自动保存修改，因此如果窗口被刷新，所有的修改都会丢失。
            请大家使用“另存为”功能对文件进行保存。
        </p>
        <p>
            本地开发需首先安装VSCode，或兼容VSCode插件的其他开发软件，如VSCode的开源构建VSCodium。
            国内的小伙伴可以使用后者，有各个大学提供的镜像站方便下载。
            在开发软件的扩展中，搜索并安装"MoonBit Language"插件。
            进阶开发需要安装命令行工具，可以在MoonBit官方网站下载命令行工具。
            后续开发流程和浏览器环境相同。
        </p>
        <p>
            浏览器环境已经为我们准备了一个项目路径，我们只需在这个路径下新建月兔文件即可编写代码。
            在本地环境，我们需要用命令行工具创建一个项目，然后再编写代码。
            创建项目的命令为moon new，在交互式提示下输入项目路径、作者名字、项目名称即可，其它选项可以使用默认值。
        </p>
        <p>
            在进行了月兔的开发准备后，让我们尝试理解月兔的代码。
            下面将为大家展示一个典型的月兔程序，亦是上一节课的案例代码。
            我们在此定义了一个顶层函数以及测试代码块。
            顶层函数中，我们定义了一个for循环表达式，循环体内是一个条件表达式。
            在测试代码块，我们使用了两个断言命令来判断我们程序的正确性。
            上节课提到，在开发环境中，测试代码上方会有个test按钮，点击它就可以运行测试用例，验证我们的代码是否正确。
            为什么我们定义的函数可以计算出正确的结果呢？接下来我们要理解这段代码是如何运行的，
        </p>
        <p>
            为了能够正确地理解代码所定义的程序的行为，从而写出正确的程序或是读懂他人的程序，我们需要能够理解程序的计算过程。
            为此，我们需要建立一个计算模型。
            月兔程序可以通过以值为中心的编程，或者说基于表达式的编程来描述。
            即，将程序看作是定义一个值的表达式，而程序的运行则是对这个表达式进行简化获得我们所定义的值的过程。
            相比较之下，命令式编程风格则是定义做什么，通常由一系列的命令组成，例如：`创建名为x的变量`、`令x为5`、`令y指向x`。
            我们将会在后续课程中更深入了解。
        </p>
        <p>
            每一个类型对应的是一个值的集合，如Int对应部分整数的集合；Double对应了部分实数的集合；String对应了字符串的集合，等等。
            我们稍后将详细了解月兔的基础数据类型。
            每一个表达式由基于值的运算构成，并且可以简化为一个值（或已经是一个值）。
            在定义表达式的时候，可以通过使用括号来嵌套表达式。以下是一些例子。
        </p>
        <p>
            另一个需要了解的概念是静态与动态。
            “静态”指在程序运行前的性质，而“动态”指在程序运行时的性质。
            月兔拥有静态类型系统。
            这意味着，在程序运行之前，编译器即会检查程序的类型是否定良好，以最大程度减少在运行时出现对数据进行错误类型的运算从而导致程序中断或给出错误的结果。
            例如对一个逻辑值进行加减乘除。
            月兔中每一个标识符（即标识某个实体的符号）都关联着唯一一个类型，标识符和类型用冒号进行关联。
            月兔中每一个**表达式**都有唯一的一个类型，这个类型由组成它的子表达式决定。
            如图中的表达式，a的类型为Double，可以与同为Double的0.2进行加法。
            之后，我们通过to_int函数将其转换为Int。
            此时我们可以与x进行整数加法，获得一个整数作为表达式的值。
            因此，整个表达式的类型为Int。
            月兔使用类型推导来确认程序是否正确使用类型，而开发工具也会在开发时实时提示检查到的类型错误。
            如图中的表达式，s的类型为String，因此我们期待它与另一个字符串相加，即连接两个字符串。
            但此时，右侧类型为Int，不能相加。因此，编辑器以红色下划线提示我们它的错误。
        </p>
        <p>
            为了进行基于表达式的编程，我们需要了解月兔中有哪些值。
            我们在这里先介绍月兔的基本数据类型中最简单的一部分：逻辑值、整数、浮点数、字符与字符串，以及多元组。
            其他的数据类型将在之后的课程中一一介绍。
            我们在这部分的介绍中不涉及数据的底层表示，如二进制、二进制补码等，感兴趣的同学可以在推荐阅读中进行拓展学习。
        </p>
        <p>
            首先我们要介绍的数据类型为逻辑值，亦称为布尔值，纪念发明布尔代数的数学家乔治·布尔而得名。
            它只有两种值：真和假，即true和false。
            常见的逻辑值的运算有：或、与、非。
            非，即是对当前逻辑值取反，非真即为假，非假即为真。
            与，当两者皆真才为真。例如，真与假，其结果为假。真与真，其结果为真。假与假，其结果为假。
            或，当两者皆假才为假。例如，真或假，其结果为真。真或真，其结果为真。假或假，其结果为假。
            在我们给出的代码样例中，两个等号表示比较，等号右侧是我们对左侧定义的表达式的简化值的预期。
            换句话说，这些代码本身也是类型为逻辑值的表达式，并且我们期待它们的值均为真。
            在这里，我们给出一个小练习：如何用或、与、非定义异或？
        </p>
        <p>
            接下来我们介绍的数据类型为整数。
            整数大家都很熟悉，然而在计算机中，中央处理器一次能计算的数据大小是有限的。
            为了保证性能，基础数据所代表的数据范围也是有限的。
            在月兔中，基础类型中的整数分为整形和长整型，分别有不同的值域。
            在月兔中，整数相除获得的依然是整数，其结果为整数除法中的商。
            若涉及负数，则按照正数进行运算后赋予正负号。例如，-4除以3结果为-1。
            当然，除以零依然不被允许，会在运行时产生错误中断程序。
            既然整数有范围，那么对整数进行超出范围的运算后，获得的结果就会溢出。
            溢出的结果会变成范围中的某一整数而非期待的正确结果。举例来说，如果对最大的整型加一，则会变为最小的整型。
            在月兔中，整数的四则运算只能由相同类型的整型进行，也就是整型只能与整型进行运算，长整型只能与长整型进行运算。
            如果想要将整型与长整型进行计算，需要将整型利用函数to_int64提升为长整形之后再运算。
            当直接定义长整型数字时，需在数字最后加上大写的L以示区别，否则默认为整型。
            而将长整型转化为整型则使用to_int，如100L.to_int()。
            需要注意的是，整数调用方法必须加括号。
            在这里，我们给出一个小练习：如何计算两个正整数的平均数而不溢出？
        </p>
        <p>
            接下来我们介绍实数在计算机内部的表示。
            如之前所说，计算机中，基础数据代表的数据长度是有限的，因此我们无法表示一切的实数，而只能表示一部分的有限小数，并且通过尾数与指数结合的方式进行近似表达。
            例如，0.1、0.2、0.3等小数在计算机中都无法精确表示，因此0.1 + 0.2的结果并不等于0.3。
            在月兔中，浮点数也有两个类型：Float和Double，分别对应单精度和双精度浮点数。
            与整数相同，浮点数的四则运算只能是同精度的两个浮点数进行，并获得同精度的浮点数计算结果。
            若要对整数与浮点数进行运算，则须将整数提升为浮点数，再进行运算。
            反之，也可通过舍弃小数点后的部分从浮点数近似为整数。
            在这里，我们给出一个小练习：如何通过整数与浮点数之间的相互转换，比较0.1 + 0.2与0.3到小数点后一位使得结果为真？
        </p>
        <p>
            我们在电脑上看到的一个个汉字、英文字母、数字等，都被归类为字符。
            而字符的序列则是字符串。
            在月兔中，字符类型为Char，而字符串类型为String。
            字符用英文单引号标识；字符串用英文双引号标识。
            这些文字是如何在计算机中表达的呢？
            答案是，通过编码，将一个个数字映射为一个个字符，即一个字符对应一个数字。
            这种映射有多种可能的方式。较为通用的是ASCII，即美国信息交换标准代码，第一版在1963年发布。
            它定义了英文字符与常见符号到0～127的映射。
            举例来说，大写字母A到Z对应了从65到90的数字。
            之后，为了兼容所有国家的文字以及表情符号，有了Unicode，即统一码。
            在兼容ASCII的基础上进行了拓展。
            举例来说，“月”与“兔”在统一码中分别对应26376与20820。
            统一码有不同的编码方式，如UTF-8、UTF-16等，感兴趣的同学可以搜索它们的区别。
            月兔的字符编码采用了Unicode。
            基于编码，我们可以将整型转化为字符。
        </p>
        <p>
            在了解了一系列基础数据后，我们也会希望能够表达一些比较复杂的数据类型。
            例如日期需要由三个数字构成，而一个人的个人信息或许可以包含他/她的名字和年龄。
            为此，多元组允许我们将不同类型的数据结合在一起，用小括号包裹，用逗号分隔。
            我们可以通过从0开始的下标访问数据
        </p>
        <p>
            月兔还有着其他的类型结构，如函数类型、单值类型、列表类型、自定义结构体等。
            我们将会在后续的课程中见到它们，并且学习如何自定义复杂的数据结构。
        </p>
        <p>
            下面我们学习如何计算月兔中的表达式。
        </p>
        <p>
            我们可以将月兔的表达式看作定义值的一种方式；
            进一步的，我们可以将月兔的运行过程看作一系列的计算或者简化表达式的求值步骤。
            相对而言，命令式编程则可以被看作执行一系列行为或者命令，其中每一个命令都会修改机器的状态。
            我们用胖箭头表示一个表达式会被化简为一个值。
        </p>
        <p>
            我们将分解化简的流程为一系列单步计算，用竖线加上箭头的符号表示。
            例如，2+3，乘，5-2，这个表达式会被单步计算为5乘5-2，进一步计算得到5乘3，最后得到15。
            因此，原表达式被化简为15这个值。
        </p>
        <p>
            下面我们介绍月兔的数值绑定。
            数值绑定的定义形式为let、标识符、冒号、类型、等号、表达式。
            数值绑定将一个标识符与一个表达式绑定，作为计算的中间值来简化程序定义，避免出现超级复杂的表达式。
            数据绑定中的类型声明多数时候可以省略，月兔编译器会根据表达式类型进行推断。
            数值绑定后，出现的标识符均可被替换为绑定的表达式。
            若同一标识符被绑定多次，则以最近一次绑定为准，即最新的定义遮掩了之前的定义。
            如超出定义生效范围，则会恢复被遮掩的定义，因此并非进行了修改。
        </p>
        <p>
            下面我们介绍月兔的表达式块。
            表达式块由大括号定义，包含一系列表达式或数值绑定。
            表达式块中最后的表达式的类型即为表达式块的类型；最后的表达式的值即为表达式块的值。
            如果一个函数定义或数值绑定定义在所有表达式块外，则我们称之为顶层函数或顶层定义。
            如果一个函数定义或数值绑定定义在某个表达式内，则我们称之为本地函数或本地定义。
            顶层可以被称为全局，而本地可称为局部，这是因为它们生效的范围是全局或局部的。
        </p>
        <p>
            定义的生效范围又称作用域。
            全局作用域指的是整个文件范围内生效，而局部作用域指的是在定义开始之后，直到当前表达式块结束期间生效。
            图中我们定义了两个顶层标识符value和y。
            value的值由表达式块定义，其中定义了x、temp和another temp。
            而在another temp中我们又定义了一次temp。
            注意箭头指向，在第七行定义了another temp的值的表达式中的temp是最近定义的第5行的temp，它遮掩了第3行temp的定义。
            而第九行定义了value的值的表达式中的temp则是第3行的temp，因为此时已经超出了第5行的temp的作用域（第5-8行）。
            同时我们注意到，第9行的y的定义出现在第12行，也就是定义出现在了使用之后。这是被允许的，因为y在顶层被定义，作用域为全局。
        </p>
        <p>
            基于数值绑定，表达式的化简过程分为以下几步。
            首先，简化数值绑定右侧的表达式。
            然后，将出现的标识符替换为简化后的值。
            在此过程中，省略数值绑定本身。
            最后，重复上述步骤，对剩余表达式进行化简。
            按此步骤对上面的案例进行化简。
            首先，我们可以替换所有x出现的地方为1，并省略x的数值绑定。
            同理，替换y为10，并省略y的数值绑定。
        </p>
        <p>
            之后，我们可以简化两处temp定义的右侧表达式，并对another temp中的标识符进行替换。
        </p>
        <p>
            然后，我们可以计算another temp的值。回忆一下，表达式块的值即是表达式块内最后一个表达式的值。
        </p>
        <p>
            到了这一步，我们可以替换剩下的标识符为它们所绑定的值。
        </p>
        <p>
            最后我们可以得出结论，value的值为15.
        </p>
        <p>
            除了对值进行运算以外，月兔中还有条件表达式，用于判断，根据条件给出不同的值。
            条件表达式的定义形式为if、条件、条件为真的表达式块、else、条件为假的表达式块。
            在月兔中，条件表达式亦是表达式，因此可以被用在其他的表达式内，比如图中这些例子。
            条件表达式中，条件的类型必须为逻辑值，而其余两个表达式块的类型必须相同，这个类型代表了整个表达式的类型。
            比如例子中的条件表达式，条件是对两个浮点数进行相等的判定，类型为逻辑值；真假分支表达式块的值均为字符串，因此整个条件表达式类型为字符串。
            条件表达式的简化取决于条件的简化结果为真或假。
            若为真，则条件表达式简化为第一个表达式块的值。
            若为假，则简化为第二个表达式块的值。
        </p>
        <p>
            总结一下今天学习的内容。
            我们首先了解了如何配置月兔的开发环境，包括浏览器、云原生和本地开发环境。
            然后，我们了解了月兔的基本数据类型，包括逻辑值、整数、浮点数、字符与字符串以及多元组。
            最后，我们学习了月兔的表达式和数值绑定，以及如何通过简化表达式来理解月兔程序的运行。
        </p>
        <p>
            那么以上便是今天课程的全部内容。感谢大家的收看，我们下次再见。
        </p>
    </voice>
</speak>